package stable

import (
	"encoding/json"
	"fmt"

	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type PasswordCredential struct {
	// Do not use.
	CustomKeyIdentifier nullable.Type[string] `json:"customKeyIdentifier,omitempty"`

	// Friendly name for the password. Optional.
	DisplayName nullable.Type[string] `json:"displayName,omitempty"`

	// The date and time at which the password expires represented using ISO 8601 format and is always in UTC time. For
	// example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
	EndDateTime nullable.Type[string] `json:"endDateTime,omitempty"`

	// Contains the first three characters of the password. Read-only.
	Hint nullable.Type[string] `json:"hint,omitempty"`

	// The unique identifier for the password.
	KeyId nullable.Type[string] `json:"keyId,omitempty"`

	// The OData ID of this entity
	ODataId *string `json:"@odata.id,omitempty"`

	// The OData Type of this entity
	ODataType *string `json:"@odata.type,omitempty"`

	// Read-only; Contains the strong passwords generated by Microsoft Entra ID that are 16-64 characters in length. The
	// generated password value is only returned during the initial POST request to addPassword. There is no way to retrieve
	// this password in the future.
	SecretText nullable.Type[string] `json:"secretText,omitempty"`

	// The date and time at which the password becomes valid. The Timestamp type represents date and time information using
	// ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	// Optional.
	StartDateTime nullable.Type[string] `json:"startDateTime,omitempty"`
}

var _ json.Marshaler = PasswordCredential{}

func (s PasswordCredential) MarshalJSON() ([]byte, error) {
	type wrapper PasswordCredential
	wrapped := wrapper(s)
	encoded, err := json.Marshal(wrapped)
	if err != nil {
		return nil, fmt.Errorf("marshaling PasswordCredential: %+v", err)
	}

	var decoded map[string]interface{}
	if err = json.Unmarshal(encoded, &decoded); err != nil {
		return nil, fmt.Errorf("unmarshaling PasswordCredential: %+v", err)
	}

	delete(decoded, "hint")

	encoded, err = json.Marshal(decoded)
	if err != nil {
		return nil, fmt.Errorf("re-marshaling PasswordCredential: %+v", err)
	}

	return encoded, nil
}
