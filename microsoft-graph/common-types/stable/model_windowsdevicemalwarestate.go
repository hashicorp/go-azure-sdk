package stable

import (
	"encoding/json"
	"fmt"

	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

var _ Entity = WindowsDeviceMalwareState{}

type WindowsDeviceMalwareState struct {
	// Information URL to learn more about the malware
	AdditionalInformationUrl nullable.Type[string] `json:"additionalInformationUrl,omitempty"`

	// Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm,
	// backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie,
	// browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler,
	// stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit,
	// trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService,
	// trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior,
	// vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
	Category *WindowsMalwareCategory `json:"category,omitempty"`

	// Number of times the malware is detected
	DetectionCount nullable.Type[int64] `json:"detectionCount,omitempty"`

	// Malware name
	DisplayName nullable.Type[string] `json:"displayName,omitempty"`

	// Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running,
	// notRunning.
	ExecutionState *WindowsMalwareExecutionState `json:"executionState,omitempty"`

	// Initial detection datetime of the malware
	InitialDetectionDateTime nullable.Type[string] `json:"initialDetectionDateTime,omitempty"`

	// The last time this particular threat was changed
	LastStateChangeDateTime nullable.Type[string] `json:"lastStateChangeDateTime,omitempty"`

	// Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
	Severity *WindowsMalwareSeverity `json:"severity,omitempty"`

	// Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned,
	// quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned,
	// blockFailed.
	State *WindowsMalwareState `json:"state,omitempty"`

	// Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed,
	// manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed,
	// cleaned, allowed, noStatusCleared.
	ThreatState *WindowsMalwareThreatState `json:"threatState,omitempty"`

	// Fields inherited from Entity

	// The unique identifier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// The OData ID of this entity
	ODataId *string `json:"@odata.id,omitempty"`

	// The OData Type of this entity
	ODataType *string `json:"@odata.type,omitempty"`
}

func (s WindowsDeviceMalwareState) Entity() BaseEntityImpl {
	return BaseEntityImpl{
		Id:        s.Id,
		ODataId:   s.ODataId,
		ODataType: s.ODataType,
	}
}

var _ json.Marshaler = WindowsDeviceMalwareState{}

func (s WindowsDeviceMalwareState) MarshalJSON() ([]byte, error) {
	type wrapper WindowsDeviceMalwareState
	wrapped := wrapper(s)
	encoded, err := json.Marshal(wrapped)
	if err != nil {
		return nil, fmt.Errorf("marshaling WindowsDeviceMalwareState: %+v", err)
	}

	var decoded map[string]interface{}
	if err = json.Unmarshal(encoded, &decoded); err != nil {
		return nil, fmt.Errorf("unmarshaling WindowsDeviceMalwareState: %+v", err)
	}

	decoded["@odata.type"] = "#microsoft.graph.windowsDeviceMalwareState"

	encoded, err = json.Marshal(decoded)
	if err != nil {
		return nil, fmt.Errorf("re-marshaling WindowsDeviceMalwareState: %+v", err)
	}

	return encoded, nil
}
