package stable

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsMalwareState string

const (
	WindowsMalwareState_Abandoned        WindowsMalwareState = "abandoned"
	WindowsMalwareState_AllowFailed      WindowsMalwareState = "allowFailed"
	WindowsMalwareState_Allowed          WindowsMalwareState = "allowed"
	WindowsMalwareState_BlockFailed      WindowsMalwareState = "blockFailed"
	WindowsMalwareState_Blocked          WindowsMalwareState = "blocked"
	WindowsMalwareState_CleanFailed      WindowsMalwareState = "cleanFailed"
	WindowsMalwareState_Cleaned          WindowsMalwareState = "cleaned"
	WindowsMalwareState_Detected         WindowsMalwareState = "detected"
	WindowsMalwareState_QuarantineFailed WindowsMalwareState = "quarantineFailed"
	WindowsMalwareState_Quarantined      WindowsMalwareState = "quarantined"
	WindowsMalwareState_RemoveFailed     WindowsMalwareState = "removeFailed"
	WindowsMalwareState_Removed          WindowsMalwareState = "removed"
	WindowsMalwareState_Unknown          WindowsMalwareState = "unknown"
)

func PossibleValuesForWindowsMalwareState() []string {
	return []string{
		string(WindowsMalwareState_Abandoned),
		string(WindowsMalwareState_AllowFailed),
		string(WindowsMalwareState_Allowed),
		string(WindowsMalwareState_BlockFailed),
		string(WindowsMalwareState_Blocked),
		string(WindowsMalwareState_CleanFailed),
		string(WindowsMalwareState_Cleaned),
		string(WindowsMalwareState_Detected),
		string(WindowsMalwareState_QuarantineFailed),
		string(WindowsMalwareState_Quarantined),
		string(WindowsMalwareState_RemoveFailed),
		string(WindowsMalwareState_Removed),
		string(WindowsMalwareState_Unknown),
	}
}

func (s *WindowsMalwareState) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseWindowsMalwareState(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseWindowsMalwareState(input string) (*WindowsMalwareState, error) {
	vals := map[string]WindowsMalwareState{
		"abandoned":        WindowsMalwareState_Abandoned,
		"allowfailed":      WindowsMalwareState_AllowFailed,
		"allowed":          WindowsMalwareState_Allowed,
		"blockfailed":      WindowsMalwareState_BlockFailed,
		"blocked":          WindowsMalwareState_Blocked,
		"cleanfailed":      WindowsMalwareState_CleanFailed,
		"cleaned":          WindowsMalwareState_Cleaned,
		"detected":         WindowsMalwareState_Detected,
		"quarantinefailed": WindowsMalwareState_QuarantineFailed,
		"quarantined":      WindowsMalwareState_Quarantined,
		"removefailed":     WindowsMalwareState_RemoveFailed,
		"removed":          WindowsMalwareState_Removed,
		"unknown":          WindowsMalwareState_Unknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsMalwareState(input)
	return &out, nil
}
