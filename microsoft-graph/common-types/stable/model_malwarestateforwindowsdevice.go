package stable

import (
	"encoding/json"
	"fmt"

	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

var _ Entity = MalwareStateForWindowsDevice{}

type MalwareStateForWindowsDevice struct {
	// Indicates the number of times the malware is detected
	DetectionCount nullable.Type[int64] `json:"detectionCount,omitempty"`

	// Indicates the name of the device being evaluated for malware state
	DeviceName nullable.Type[string] `json:"deviceName,omitempty"`

	// Indicates execution status of the malware. Possible values are: unknown, blocked, allowed, running, notRunning.
	// Defaults to unknown. Possible values are: unknown, blocked, allowed, running, notRunning.
	ExecutionState *WindowsMalwareExecutionState `json:"executionState,omitempty"`

	// Initial detection datetime of the malware
	InitialDetectionDateTime nullable.Type[string] `json:"initialDetectionDateTime,omitempty"`

	// The last time this particular threat was changed
	LastStateChangeDateTime nullable.Type[string] `json:"lastStateChangeDateTime,omitempty"`

	// Indicates threat status of the malware. Possible values are: active, actionFailed, manualStepsRequired,
	// fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed,
	// noStatusCleared. defaults to noStatusCleared. Possible values are: active, actionFailed, manualStepsRequired,
	// fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed,
	// noStatusCleared.
	ThreatState *WindowsMalwareThreatState `json:"threatState,omitempty"`

	// Fields inherited from Entity

	// The unique identifier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// The OData ID of this entity
	ODataId *string `json:"@odata.id,omitempty"`

	// The OData Type of this entity
	ODataType *string `json:"@odata.type,omitempty"`
}

func (s MalwareStateForWindowsDevice) Entity() BaseEntityImpl {
	return BaseEntityImpl{
		Id:        s.Id,
		ODataId:   s.ODataId,
		ODataType: s.ODataType,
	}
}

var _ json.Marshaler = MalwareStateForWindowsDevice{}

func (s MalwareStateForWindowsDevice) MarshalJSON() ([]byte, error) {
	type wrapper MalwareStateForWindowsDevice
	wrapped := wrapper(s)
	encoded, err := json.Marshal(wrapped)
	if err != nil {
		return nil, fmt.Errorf("marshaling MalwareStateForWindowsDevice: %+v", err)
	}

	var decoded map[string]interface{}
	if err = json.Unmarshal(encoded, &decoded); err != nil {
		return nil, fmt.Errorf("unmarshaling MalwareStateForWindowsDevice: %+v", err)
	}

	decoded["@odata.type"] = "#microsoft.graph.malwareStateForWindowsDevice"

	encoded, err = json.Marshal(decoded)
	if err != nil {
		return nil, fmt.Errorf("re-marshaling MalwareStateForWindowsDevice: %+v", err)
	}

	return encoded, nil
}
