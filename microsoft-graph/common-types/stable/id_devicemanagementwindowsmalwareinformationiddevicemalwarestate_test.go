package stable

import (
	"testing"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

var _ resourceids.ResourceId = &DeviceManagementWindowsMalwareInformationIdDeviceMalwareStateId{}

func TestNewDeviceManagementWindowsMalwareInformationIdDeviceMalwareStateID(t *testing.T) {
	id := NewDeviceManagementWindowsMalwareInformationIdDeviceMalwareStateID("windowsMalwareInformationIdValue", "malwareStateForWindowsDeviceIdValue")

	if id.WindowsMalwareInformationId != "windowsMalwareInformationIdValue" {
		t.Fatalf("Expected %q but got %q for Segment 'WindowsMalwareInformationId'", id.WindowsMalwareInformationId, "windowsMalwareInformationIdValue")
	}

	if id.MalwareStateForWindowsDeviceId != "malwareStateForWindowsDeviceIdValue" {
		t.Fatalf("Expected %q but got %q for Segment 'MalwareStateForWindowsDeviceId'", id.MalwareStateForWindowsDeviceId, "malwareStateForWindowsDeviceIdValue")
	}
}

func TestFormatDeviceManagementWindowsMalwareInformationIdDeviceMalwareStateID(t *testing.T) {
	actual := NewDeviceManagementWindowsMalwareInformationIdDeviceMalwareStateID("windowsMalwareInformationIdValue", "malwareStateForWindowsDeviceIdValue").ID()
	expected := "/deviceManagement/windowsMalwareInformation/windowsMalwareInformationIdValue/deviceMalwareStates/malwareStateForWindowsDeviceIdValue"
	if actual != expected {
		t.Fatalf("Expected the Formatted ID to be %q but got %q", expected, actual)
	}
}

func TestParseDeviceManagementWindowsMalwareInformationIdDeviceMalwareStateID(t *testing.T) {
	testData := []struct {
		Input    string
		Error    bool
		Expected *DeviceManagementWindowsMalwareInformationIdDeviceMalwareStateId
	}{
		{
			// Incomplete URI
			Input: "",
			Error: true,
		},
		{
			// Incomplete URI
			Input: "/deviceManagement",
			Error: true,
		},
		{
			// Incomplete URI
			Input: "/deviceManagement/windowsMalwareInformation",
			Error: true,
		},
		{
			// Incomplete URI
			Input: "/deviceManagement/windowsMalwareInformation/windowsMalwareInformationIdValue",
			Error: true,
		},
		{
			// Incomplete URI
			Input: "/deviceManagement/windowsMalwareInformation/windowsMalwareInformationIdValue/deviceMalwareStates",
			Error: true,
		},
		{
			// Valid URI
			Input: "/deviceManagement/windowsMalwareInformation/windowsMalwareInformationIdValue/deviceMalwareStates/malwareStateForWindowsDeviceIdValue",
			Expected: &DeviceManagementWindowsMalwareInformationIdDeviceMalwareStateId{
				WindowsMalwareInformationId:    "windowsMalwareInformationIdValue",
				MalwareStateForWindowsDeviceId: "malwareStateForWindowsDeviceIdValue",
			},
		},
		{
			// Invalid (Valid Uri with Extra segment)
			Input: "/deviceManagement/windowsMalwareInformation/windowsMalwareInformationIdValue/deviceMalwareStates/malwareStateForWindowsDeviceIdValue/extra",
			Error: true,
		},
	}
	for _, v := range testData {
		t.Logf("[DEBUG] Testing %q", v.Input)

		actual, err := ParseDeviceManagementWindowsMalwareInformationIdDeviceMalwareStateID(v.Input)
		if err != nil {
			if v.Error {
				continue
			}

			t.Fatalf("Expect a value but got an error: %+v", err)
		}
		if v.Error {
			t.Fatal("Expect an error but didn't get one")
		}

		if actual.WindowsMalwareInformationId != v.Expected.WindowsMalwareInformationId {
			t.Fatalf("Expected %q but got %q for WindowsMalwareInformationId", v.Expected.WindowsMalwareInformationId, actual.WindowsMalwareInformationId)
		}

		if actual.MalwareStateForWindowsDeviceId != v.Expected.MalwareStateForWindowsDeviceId {
			t.Fatalf("Expected %q but got %q for MalwareStateForWindowsDeviceId", v.Expected.MalwareStateForWindowsDeviceId, actual.MalwareStateForWindowsDeviceId)
		}

	}
}

func TestParseDeviceManagementWindowsMalwareInformationIdDeviceMalwareStateIDInsensitively(t *testing.T) {
	testData := []struct {
		Input    string
		Error    bool
		Expected *DeviceManagementWindowsMalwareInformationIdDeviceMalwareStateId
	}{
		{
			// Incomplete URI
			Input: "",
			Error: true,
		},
		{
			// Incomplete URI
			Input: "/deviceManagement",
			Error: true,
		},
		{
			// Incomplete URI (mIxEd CaSe since this is insensitive)
			Input: "/dEvIcEmAnAgEmEnT",
			Error: true,
		},
		{
			// Incomplete URI
			Input: "/deviceManagement/windowsMalwareInformation",
			Error: true,
		},
		{
			// Incomplete URI (mIxEd CaSe since this is insensitive)
			Input: "/dEvIcEmAnAgEmEnT/wInDoWsMaLwArEiNfOrMaTiOn",
			Error: true,
		},
		{
			// Incomplete URI
			Input: "/deviceManagement/windowsMalwareInformation/windowsMalwareInformationIdValue",
			Error: true,
		},
		{
			// Incomplete URI (mIxEd CaSe since this is insensitive)
			Input: "/dEvIcEmAnAgEmEnT/wInDoWsMaLwArEiNfOrMaTiOn/wInDoWsMaLwArEiNfOrMaTiOnIdVaLuE",
			Error: true,
		},
		{
			// Incomplete URI
			Input: "/deviceManagement/windowsMalwareInformation/windowsMalwareInformationIdValue/deviceMalwareStates",
			Error: true,
		},
		{
			// Incomplete URI (mIxEd CaSe since this is insensitive)
			Input: "/dEvIcEmAnAgEmEnT/wInDoWsMaLwArEiNfOrMaTiOn/wInDoWsMaLwArEiNfOrMaTiOnIdVaLuE/dEvIcEmAlWaReStAtEs",
			Error: true,
		},
		{
			// Valid URI
			Input: "/deviceManagement/windowsMalwareInformation/windowsMalwareInformationIdValue/deviceMalwareStates/malwareStateForWindowsDeviceIdValue",
			Expected: &DeviceManagementWindowsMalwareInformationIdDeviceMalwareStateId{
				WindowsMalwareInformationId:    "windowsMalwareInformationIdValue",
				MalwareStateForWindowsDeviceId: "malwareStateForWindowsDeviceIdValue",
			},
		},
		{
			// Invalid (Valid Uri with Extra segment)
			Input: "/deviceManagement/windowsMalwareInformation/windowsMalwareInformationIdValue/deviceMalwareStates/malwareStateForWindowsDeviceIdValue/extra",
			Error: true,
		},
		{
			// Valid URI (mIxEd CaSe since this is insensitive)
			Input: "/dEvIcEmAnAgEmEnT/wInDoWsMaLwArEiNfOrMaTiOn/wInDoWsMaLwArEiNfOrMaTiOnIdVaLuE/dEvIcEmAlWaReStAtEs/mAlWaReStAtEfOrWiNdOwSdEvIcEiDvAlUe",
			Expected: &DeviceManagementWindowsMalwareInformationIdDeviceMalwareStateId{
				WindowsMalwareInformationId:    "wInDoWsMaLwArEiNfOrMaTiOnIdVaLuE",
				MalwareStateForWindowsDeviceId: "mAlWaReStAtEfOrWiNdOwSdEvIcEiDvAlUe",
			},
		},
		{
			// Invalid (Valid Uri with Extra segment - mIxEd CaSe since this is insensitive)
			Input: "/dEvIcEmAnAgEmEnT/wInDoWsMaLwArEiNfOrMaTiOn/wInDoWsMaLwArEiNfOrMaTiOnIdVaLuE/dEvIcEmAlWaReStAtEs/mAlWaReStAtEfOrWiNdOwSdEvIcEiDvAlUe/extra",
			Error: true,
		},
	}
	for _, v := range testData {
		t.Logf("[DEBUG] Testing %q", v.Input)

		actual, err := ParseDeviceManagementWindowsMalwareInformationIdDeviceMalwareStateIDInsensitively(v.Input)
		if err != nil {
			if v.Error {
				continue
			}

			t.Fatalf("Expect a value but got an error: %+v", err)
		}
		if v.Error {
			t.Fatal("Expect an error but didn't get one")
		}

		if actual.WindowsMalwareInformationId != v.Expected.WindowsMalwareInformationId {
			t.Fatalf("Expected %q but got %q for WindowsMalwareInformationId", v.Expected.WindowsMalwareInformationId, actual.WindowsMalwareInformationId)
		}

		if actual.MalwareStateForWindowsDeviceId != v.Expected.MalwareStateForWindowsDeviceId {
			t.Fatalf("Expected %q but got %q for MalwareStateForWindowsDeviceId", v.Expected.MalwareStateForWindowsDeviceId, actual.MalwareStateForWindowsDeviceId)
		}

	}
}

func TestSegmentsForDeviceManagementWindowsMalwareInformationIdDeviceMalwareStateId(t *testing.T) {
	segments := DeviceManagementWindowsMalwareInformationIdDeviceMalwareStateId{}.Segments()
	if len(segments) == 0 {
		t.Fatalf("DeviceManagementWindowsMalwareInformationIdDeviceMalwareStateId has no segments")
	}

	uniqueNames := make(map[string]struct{}, 0)
	for _, segment := range segments {
		uniqueNames[segment.Name] = struct{}{}
	}
	if len(uniqueNames) != len(segments) {
		t.Fatalf("Expected the Segments to be unique but got %q unique segments and %d total segments", len(uniqueNames), len(segments))
	}
}
