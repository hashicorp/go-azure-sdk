package stable

import (
	"encoding/json"
	"fmt"

	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

var _ Entity = Alert{}

type Alert struct {
	// Name or alias of the activity group (attacker) this alert is attributed to.
	ActivityGroupName nullable.Type[string] `json:"activityGroupName,omitempty"`

	AlertDetections *[]AlertDetection `json:"alertDetections,omitempty"`

	// Name of the analyst the alert is assigned to for triage, investigation, or remediation (supports update).
	AssignedTo nullable.Type[string] `json:"assignedTo,omitempty"`

	// Azure subscription ID, present if this alert is related to an Azure resource.
	AzureSubscriptionId nullable.Type[string] `json:"azureSubscriptionId,omitempty"`

	// Microsoft Entra tenant ID. Required.
	AzureTenantId string `json:"azureTenantId"`

	// Category of the alert (for example, credentialTheft, ransomware).
	Category nullable.Type[string] `json:"category,omitempty"`

	// Time at which the alert was closed. The Timestamp type represents date and time information using ISO 8601 format and
	// is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z (supports update).
	ClosedDateTime nullable.Type[string] `json:"closedDateTime,omitempty"`

	// Security-related stateful information generated by the provider about the cloud application/s related to this alert.
	CloudAppStates *[]CloudAppSecurityState `json:"cloudAppStates,omitempty"`

	// Customer-provided comments on alert (for customer alert management) (supports update).
	Comments *[]string `json:"comments,omitempty"`

	// Confidence of the detection logic (percentage between 1-100).
	Confidence nullable.Type[int64] `json:"confidence,omitempty"`

	// Time at which the alert was created by the alert provider. The Timestamp type represents date and time information
	// using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	// Required.
	CreatedDateTime nullable.Type[string] `json:"createdDateTime,omitempty"`

	// Alert description.
	Description nullable.Type[string] `json:"description,omitempty"`

	// Set of alerts related to this alert entity (each alert is pushed to the SIEM as a separate record).
	DetectionIds *[]string `json:"detectionIds,omitempty"`

	// Time at which the event or events that served as the trigger to generate the alert occurred. The Timestamp type
	// represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on
	// Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
	EventDateTime nullable.Type[string] `json:"eventDateTime,omitempty"`

	// Analyst feedback on the alert. Possible values are: unknown, truePositive, falsePositive, benignPositive. Supports
	// update.
	Feedback *AlertFeedback `json:"feedback,omitempty"`

	// Security-related stateful information generated by the provider about the file(s) related to this alert.
	FileStates *[]FileSecurityState `json:"fileStates,omitempty"`

	HistoryStates *[]AlertHistoryState `json:"historyStates,omitempty"`

	// Security-related stateful information generated by the provider about the host(s) related to this alert.
	HostStates *[]HostSecurityState `json:"hostStates,omitempty"`

	// IDs of incidents related to current alert.
	IncidentIds *[]string `json:"incidentIds,omitempty"`

	InvestigationSecurityStates *[]InvestigationSecurityState `json:"investigationSecurityStates,omitempty"`
	LastEventDateTime           nullable.Type[string]         `json:"lastEventDateTime,omitempty"`

	// Time at which the alert entity was last modified. The Timestamp type represents date and time information using ISO
	// 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	LastModifiedDateTime nullable.Type[string] `json:"lastModifiedDateTime,omitempty"`

	// Threat Intelligence pertaining to malware related to this alert.
	MalwareStates *[]MalwareState `json:"malwareStates,omitempty"`

	MessageSecurityStates *[]MessageSecurityState `json:"messageSecurityStates,omitempty"`

	// Security-related stateful information generated by the provider about the network connection(s) related to this
	// alert.
	NetworkConnections *[]NetworkConnection `json:"networkConnections,omitempty"`

	// Security-related stateful information generated by the provider about the process or processes related to this alert.
	Processes *[]Process `json:"processes,omitempty"`

	// Vendor/provider recommended action(s) to take as a result of the alert (for example, isolate machine, enforce2FA,
	// reimage host).
	RecommendedActions *[]string `json:"recommendedActions,omitempty"`

	// Security-related stateful information generated by the provider about the registry keys related to this alert.
	RegistryKeyStates *[]RegistryKeyState `json:"registryKeyStates,omitempty"`

	// Resources related to current alert. For example, for some alerts this can have the Azure Resource value.
	SecurityResources *[]SecurityResource `json:"securityResources,omitempty"`

	Severity *AlertSeverity `json:"severity,omitempty"`

	// Hyperlinks (URIs) to the source material related to the alert, for example, provider's user interface for alerts or
	// log search.
	SourceMaterials *[]string `json:"sourceMaterials,omitempty"`

	Status *AlertStatus `json:"status,omitempty"`

	// User-definable labels that can be applied to an alert and can serve as filter conditions (for example 'HVA', 'SAW')
	// (supports update).
	Tags *[]string `json:"tags,omitempty"`

	// Alert title. Required.
	Title nullable.Type[string] `json:"title,omitempty"`

	// Security-related information about the specific properties that triggered the alert (properties appearing in the
	// alert). Alerts might contain information about multiple users, hosts, files, ip addresses. This field indicates which
	// properties triggered the alert generation.
	Triggers *[]AlertTrigger `json:"triggers,omitempty"`

	UriClickSecurityStates *[]UriClickSecurityState `json:"uriClickSecurityStates,omitempty"`

	// Security-related stateful information generated by the provider about the user accounts related to this alert.
	UserStates *[]UserSecurityState `json:"userStates,omitempty"`

	// Complex type containing details about the security product/service vendor, provider, and subprovider (for example,
	// vendor=Microsoft; provider=Windows Defender ATP; subProvider=AppLocker). Required.
	VendorInformation SecurityVendorInformation `json:"vendorInformation"`

	// Threat intelligence pertaining to one or more vulnerabilities related to this alert.
	VulnerabilityStates *[]VulnerabilityState `json:"vulnerabilityStates,omitempty"`

	// Fields inherited from Entity

	// The unique identifier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// The OData ID of this entity
	ODataId *string `json:"@odata.id,omitempty"`

	// The OData Type of this entity
	ODataType *string `json:"@odata.type,omitempty"`
}

func (s Alert) Entity() BaseEntityImpl {
	return BaseEntityImpl{
		Id:        s.Id,
		ODataId:   s.ODataId,
		ODataType: s.ODataType,
	}
}

var _ json.Marshaler = Alert{}

func (s Alert) MarshalJSON() ([]byte, error) {
	type wrapper Alert
	wrapped := wrapper(s)
	encoded, err := json.Marshal(wrapped)
	if err != nil {
		return nil, fmt.Errorf("marshaling Alert: %+v", err)
	}

	var decoded map[string]interface{}
	if err = json.Unmarshal(encoded, &decoded); err != nil {
		return nil, fmt.Errorf("unmarshaling Alert: %+v", err)
	}

	decoded["@odata.type"] = "#microsoft.graph.alert"

	encoded, err = json.Marshal(decoded)
	if err != nil {
		return nil, fmt.Errorf("re-marshaling Alert: %+v", err)
	}

	return encoded, nil
}
