package beta

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsMalwareThreatState string

const (
	WindowsMalwareThreatState_ActionFailed                      WindowsMalwareThreatState = "actionFailed"
	WindowsMalwareThreatState_Active                            WindowsMalwareThreatState = "active"
	WindowsMalwareThreatState_Allowed                           WindowsMalwareThreatState = "allowed"
	WindowsMalwareThreatState_Cleaned                           WindowsMalwareThreatState = "cleaned"
	WindowsMalwareThreatState_FullScanRequired                  WindowsMalwareThreatState = "fullScanRequired"
	WindowsMalwareThreatState_ManualStepsRequired               WindowsMalwareThreatState = "manualStepsRequired"
	WindowsMalwareThreatState_NoStatusCleared                   WindowsMalwareThreatState = "noStatusCleared"
	WindowsMalwareThreatState_Quarantined                       WindowsMalwareThreatState = "quarantined"
	WindowsMalwareThreatState_RebootRequired                    WindowsMalwareThreatState = "rebootRequired"
	WindowsMalwareThreatState_RemediatedWithNonCriticalFailures WindowsMalwareThreatState = "remediatedWithNonCriticalFailures"
	WindowsMalwareThreatState_Removed                           WindowsMalwareThreatState = "removed"
)

func PossibleValuesForWindowsMalwareThreatState() []string {
	return []string{
		string(WindowsMalwareThreatState_ActionFailed),
		string(WindowsMalwareThreatState_Active),
		string(WindowsMalwareThreatState_Allowed),
		string(WindowsMalwareThreatState_Cleaned),
		string(WindowsMalwareThreatState_FullScanRequired),
		string(WindowsMalwareThreatState_ManualStepsRequired),
		string(WindowsMalwareThreatState_NoStatusCleared),
		string(WindowsMalwareThreatState_Quarantined),
		string(WindowsMalwareThreatState_RebootRequired),
		string(WindowsMalwareThreatState_RemediatedWithNonCriticalFailures),
		string(WindowsMalwareThreatState_Removed),
	}
}

func (s *WindowsMalwareThreatState) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseWindowsMalwareThreatState(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseWindowsMalwareThreatState(input string) (*WindowsMalwareThreatState, error) {
	vals := map[string]WindowsMalwareThreatState{
		"actionfailed":                      WindowsMalwareThreatState_ActionFailed,
		"active":                            WindowsMalwareThreatState_Active,
		"allowed":                           WindowsMalwareThreatState_Allowed,
		"cleaned":                           WindowsMalwareThreatState_Cleaned,
		"fullscanrequired":                  WindowsMalwareThreatState_FullScanRequired,
		"manualstepsrequired":               WindowsMalwareThreatState_ManualStepsRequired,
		"nostatuscleared":                   WindowsMalwareThreatState_NoStatusCleared,
		"quarantined":                       WindowsMalwareThreatState_Quarantined,
		"rebootrequired":                    WindowsMalwareThreatState_RebootRequired,
		"remediatedwithnoncriticalfailures": WindowsMalwareThreatState_RemediatedWithNonCriticalFailures,
		"removed":                           WindowsMalwareThreatState_Removed,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsMalwareThreatState(input)
	return &out, nil
}
