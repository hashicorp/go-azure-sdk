package beta

import (
	"encoding/json"
	"fmt"

	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

var _ Entity = WindowsMalwareInformation{}

type WindowsMalwareInformation struct {
	// Indicates an informational URL to learn more about the malware
	AdditionalInformationUrl nullable.Type[string] `json:"additionalInformationUrl,omitempty"`

	// Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm,
	// backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie,
	// browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler,
	// stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit,
	// trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService,
	// trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior,
	// vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule. default value is invalid. Possible values are:
	// invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan,
	// emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker,
	// securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar,
	// remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram,
	// malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer,
	// trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy,
	// enterpriseUnwantedSoftware, ransom, hipsRule.
	Category *WindowsMalwareCategory `json:"category,omitempty"`

	// List of devices affected by current malware with the malware state on each device
	DeviceMalwareStates *[]MalwareStateForWindowsDevice `json:"deviceMalwareStates,omitempty"`

	// Indicates the name of the malware
	DisplayName nullable.Type[string] `json:"displayName,omitempty"`

	// Indicates the last time the malware was detected in UTC
	LastDetectionDateTime nullable.Type[string] `json:"lastDetectionDateTime,omitempty"`

	// Severity of the malware. Possible values are: unknown, low, moderate, high, severe. default is unknown. Possible
	// values are: unknown, low, moderate, high, severe.
	Severity *WindowsMalwareSeverity `json:"severity,omitempty"`

	// Fields inherited from Entity

	// The unique identifier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// The OData ID of this entity
	ODataId *string `json:"@odata.id,omitempty"`

	// The OData Type of this entity
	ODataType *string `json:"@odata.type,omitempty"`
}

func (s WindowsMalwareInformation) Entity() BaseEntityImpl {
	return BaseEntityImpl{
		Id:        s.Id,
		ODataId:   s.ODataId,
		ODataType: s.ODataType,
	}
}

var _ json.Marshaler = WindowsMalwareInformation{}

func (s WindowsMalwareInformation) MarshalJSON() ([]byte, error) {
	type wrapper WindowsMalwareInformation
	wrapped := wrapper(s)
	encoded, err := json.Marshal(wrapped)
	if err != nil {
		return nil, fmt.Errorf("marshaling WindowsMalwareInformation: %+v", err)
	}

	var decoded map[string]interface{}
	if err = json.Unmarshal(encoded, &decoded); err != nil {
		return nil, fmt.Errorf("unmarshaling WindowsMalwareInformation: %+v", err)
	}

	decoded["@odata.type"] = "#microsoft.graph.windowsMalwareInformation"

	encoded, err = json.Marshal(decoded)
	if err != nil {
		return nil, fmt.Errorf("re-marshaling WindowsMalwareInformation: %+v", err)
	}

	return encoded, nil
}
