package beta

import (
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

var _ resourceids.ResourceId = &MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId{}

// MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId is a struct representing the Resource ID for a Me Managed Device Id Windows Protection State Detected Malware State
type MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId struct {
	ManagedDeviceId             string
	WindowsDeviceMalwareStateId string
}

// NewMeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateID returns a new MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId struct
func NewMeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateID(managedDeviceId string, windowsDeviceMalwareStateId string) MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId {
	return MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId{
		ManagedDeviceId:             managedDeviceId,
		WindowsDeviceMalwareStateId: windowsDeviceMalwareStateId,
	}
}

// ParseMeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateID parses 'input' into a MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId
func ParseMeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateID(input string) (*MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId, error) {
	parser := resourceids.NewParserFromResourceIdType(&MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId{})
	parsed, err := parser.Parse(input, false)
	if err != nil {
		return nil, fmt.Errorf("parsing %q: %+v", input, err)
	}

	id := MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId{}
	if err = id.FromParseResult(*parsed); err != nil {
		return nil, err
	}

	return &id, nil
}

// ParseMeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateIDInsensitively parses 'input' case-insensitively into a MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId
// note: this method should only be used for API response data and not user input
func ParseMeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateIDInsensitively(input string) (*MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId, error) {
	parser := resourceids.NewParserFromResourceIdType(&MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId{})
	parsed, err := parser.Parse(input, true)
	if err != nil {
		return nil, fmt.Errorf("parsing %q: %+v", input, err)
	}

	id := MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId{}
	if err = id.FromParseResult(*parsed); err != nil {
		return nil, err
	}

	return &id, nil
}

func (id *MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId) FromParseResult(input resourceids.ParseResult) error {
	var ok bool

	if id.ManagedDeviceId, ok = input.Parsed["managedDeviceId"]; !ok {
		return resourceids.NewSegmentNotSpecifiedError(id, "managedDeviceId", input)
	}

	if id.WindowsDeviceMalwareStateId, ok = input.Parsed["windowsDeviceMalwareStateId"]; !ok {
		return resourceids.NewSegmentNotSpecifiedError(id, "windowsDeviceMalwareStateId", input)
	}

	return nil
}

// ValidateMeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateID checks that 'input' can be parsed as a Me Managed Device Id Windows Protection State Detected Malware State ID
func ValidateMeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateID(input interface{}, key string) (warnings []string, errors []error) {
	v, ok := input.(string)
	if !ok {
		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
		return
	}

	if _, err := ParseMeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateID(v); err != nil {
		errors = append(errors, err)
	}

	return
}

// ID returns the formatted Me Managed Device Id Windows Protection State Detected Malware State ID
func (id MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId) ID() string {
	fmtString := "/me/managedDevices/%s/windowsProtectionState/detectedMalwareState/%s"
	return fmt.Sprintf(fmtString, id.ManagedDeviceId, id.WindowsDeviceMalwareStateId)
}

// Segments returns a slice of Resource ID Segments which comprise this Me Managed Device Id Windows Protection State Detected Malware State ID
func (id MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId) Segments() []resourceids.Segment {
	return []resourceids.Segment{
		resourceids.StaticSegment("me", "me", "me"),
		resourceids.StaticSegment("managedDevices", "managedDevices", "managedDevices"),
		resourceids.UserSpecifiedSegment("managedDeviceId", "managedDeviceId"),
		resourceids.StaticSegment("windowsProtectionState", "windowsProtectionState", "windowsProtectionState"),
		resourceids.StaticSegment("detectedMalwareState", "detectedMalwareState", "detectedMalwareState"),
		resourceids.UserSpecifiedSegment("windowsDeviceMalwareStateId", "windowsDeviceMalwareStateId"),
	}
}

// String returns a human-readable description of this Me Managed Device Id Windows Protection State Detected Malware State ID
func (id MeManagedDeviceIdWindowsProtectionStateDetectedMalwareStateId) String() string {
	components := []string{
		fmt.Sprintf("Managed Device: %q", id.ManagedDeviceId),
		fmt.Sprintf("Windows Device Malware State: %q", id.WindowsDeviceMalwareStateId),
	}
	return fmt.Sprintf("Me Managed Device Id Windows Protection State Detected Malware State (%s)", strings.Join(components, "\n"))
}
