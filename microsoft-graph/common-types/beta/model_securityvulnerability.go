package beta

import (
	"encoding/json"
	"fmt"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

var _ Entity = SecurityVulnerability{}

type SecurityVulnerability struct {
	// Indicates whether this vulnerability has any known exploits associated to known bad actors.
	ActiveExploitsObserved *bool `json:"activeExploitsObserved,omitempty"`

	// Articles related to this vulnerability.
	Articles *[]SecurityArticle `json:"articles,omitempty"`

	// Community-defined common weakness enumerations (CWE).
	CommonWeaknessEnumerationIds *[]string `json:"commonWeaknessEnumerationIds,omitempty"`

	// Components related to this vulnerability article.
	Components *[]SecurityVulnerabilityComponent `json:"components,omitempty"`

	// The date and time when this vulnerability article was first created.
	CreatedDateTime *string `json:"createdDateTime,omitempty"`

	Cvss2Summary *SecurityCvssSummary      `json:"cvss2Summary,omitempty"`
	Cvss3Summary *SecurityCvssSummary      `json:"cvss3Summary,omitempty"`
	Description  *SecurityFormattedContent `json:"description,omitempty"`

	// Known exploits for this vulnerability.
	Exploits *[]SecurityHyperlink `json:"exploits,omitempty"`

	// Indicates whether this vulnerability has exploits in public sources (such as Packetstorm or Exploit-DB) online.
	ExploitsAvailable *bool `json:"exploitsAvailable,omitempty"`

	// Indicates whether chatter about this vulnerability has been discovered online.
	HasChatter *bool `json:"hasChatter,omitempty"`

	// The date and time when this vulnerability article was most recently updated.
	LastModifiedDateTime *string `json:"lastModifiedDateTime,omitempty"`

	// A unique algorithm that reflects the priority of a vulnerability based on the CVSS score, exploits, chatter, and
	// linkage to malware. This property also evaluates the recency of these components so users can understand which
	// vulnerability should be remediated first.
	PriorityScore *int64 `json:"priorityScore,omitempty"`

	// The date and time when this vulnerability article was published.
	PublishedDateTime *string `json:"publishedDateTime,omitempty"`

	// Reference links where further information can be learned about this vulnerability.
	References *[]SecurityHyperlink `json:"references,omitempty"`

	// Any known remediation steps.
	Remediation *SecurityFormattedContent `json:"remediation,omitempty"`

	Severity *SecurityVulnerabilitySeverity `json:"severity,omitempty"`

	// Fields inherited from Entity

	// The unique identifier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// The OData ID of this entity
	ODataId *string `json:"@odata.id,omitempty"`

	// The OData Type of this entity
	ODataType *string `json:"@odata.type,omitempty"`
}

func (s SecurityVulnerability) Entity() BaseEntityImpl {
	return BaseEntityImpl{
		Id:        s.Id,
		ODataId:   s.ODataId,
		ODataType: s.ODataType,
	}
}

var _ json.Marshaler = SecurityVulnerability{}

func (s SecurityVulnerability) MarshalJSON() ([]byte, error) {
	type wrapper SecurityVulnerability
	wrapped := wrapper(s)
	encoded, err := json.Marshal(wrapped)
	if err != nil {
		return nil, fmt.Errorf("marshaling SecurityVulnerability: %+v", err)
	}

	var decoded map[string]interface{}
	if err = json.Unmarshal(encoded, &decoded); err != nil {
		return nil, fmt.Errorf("unmarshaling SecurityVulnerability: %+v", err)
	}

	decoded["@odata.type"] = "#microsoft.graph.security.vulnerability"

	encoded, err = json.Marshal(decoded)
	if err != nil {
		return nil, fmt.Errorf("re-marshaling SecurityVulnerability: %+v", err)
	}

	return encoded, nil
}
