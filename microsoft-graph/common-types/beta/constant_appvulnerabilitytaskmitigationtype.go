package beta

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type AppVulnerabilityTaskMitigationType string

const (
	AppVulnerabilityTaskMitigationType_SecurityConfiguration AppVulnerabilityTaskMitigationType = "securityConfiguration"
	AppVulnerabilityTaskMitigationType_Uninstall             AppVulnerabilityTaskMitigationType = "uninstall"
	AppVulnerabilityTaskMitigationType_Unknown               AppVulnerabilityTaskMitigationType = "unknown"
	AppVulnerabilityTaskMitigationType_Update                AppVulnerabilityTaskMitigationType = "update"
)

func PossibleValuesForAppVulnerabilityTaskMitigationType() []string {
	return []string{
		string(AppVulnerabilityTaskMitigationType_SecurityConfiguration),
		string(AppVulnerabilityTaskMitigationType_Uninstall),
		string(AppVulnerabilityTaskMitigationType_Unknown),
		string(AppVulnerabilityTaskMitigationType_Update),
	}
}

func (s *AppVulnerabilityTaskMitigationType) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseAppVulnerabilityTaskMitigationType(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseAppVulnerabilityTaskMitigationType(input string) (*AppVulnerabilityTaskMitigationType, error) {
	vals := map[string]AppVulnerabilityTaskMitigationType{
		"securityconfiguration": AppVulnerabilityTaskMitigationType_SecurityConfiguration,
		"uninstall":             AppVulnerabilityTaskMitigationType_Uninstall,
		"unknown":               AppVulnerabilityTaskMitigationType_Unknown,
		"update":                AppVulnerabilityTaskMitigationType_Update,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := AppVulnerabilityTaskMitigationType(input)
	return &out, nil
}
