package beta

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsMalwareSeverity string

const (
	WindowsMalwareSeverity_High     WindowsMalwareSeverity = "high"
	WindowsMalwareSeverity_Low      WindowsMalwareSeverity = "low"
	WindowsMalwareSeverity_Moderate WindowsMalwareSeverity = "moderate"
	WindowsMalwareSeverity_Severe   WindowsMalwareSeverity = "severe"
	WindowsMalwareSeverity_Unknown  WindowsMalwareSeverity = "unknown"
)

func PossibleValuesForWindowsMalwareSeverity() []string {
	return []string{
		string(WindowsMalwareSeverity_High),
		string(WindowsMalwareSeverity_Low),
		string(WindowsMalwareSeverity_Moderate),
		string(WindowsMalwareSeverity_Severe),
		string(WindowsMalwareSeverity_Unknown),
	}
}

func (s *WindowsMalwareSeverity) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseWindowsMalwareSeverity(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseWindowsMalwareSeverity(input string) (*WindowsMalwareSeverity, error) {
	vals := map[string]WindowsMalwareSeverity{
		"high":     WindowsMalwareSeverity_High,
		"low":      WindowsMalwareSeverity_Low,
		"moderate": WindowsMalwareSeverity_Moderate,
		"severe":   WindowsMalwareSeverity_Severe,
		"unknown":  WindowsMalwareSeverity_Unknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsMalwareSeverity(input)
	return &out, nil
}
