package beta

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type SecurityVulnerabilitySeverity string

const (
	SecurityVulnerabilitySeverity_Critical SecurityVulnerabilitySeverity = "critical"
	SecurityVulnerabilitySeverity_High     SecurityVulnerabilitySeverity = "high"
	SecurityVulnerabilitySeverity_Low      SecurityVulnerabilitySeverity = "low"
	SecurityVulnerabilitySeverity_Medium   SecurityVulnerabilitySeverity = "medium"
	SecurityVulnerabilitySeverity_None     SecurityVulnerabilitySeverity = "none"
)

func PossibleValuesForSecurityVulnerabilitySeverity() []string {
	return []string{
		string(SecurityVulnerabilitySeverity_Critical),
		string(SecurityVulnerabilitySeverity_High),
		string(SecurityVulnerabilitySeverity_Low),
		string(SecurityVulnerabilitySeverity_Medium),
		string(SecurityVulnerabilitySeverity_None),
	}
}

func (s *SecurityVulnerabilitySeverity) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseSecurityVulnerabilitySeverity(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseSecurityVulnerabilitySeverity(input string) (*SecurityVulnerabilitySeverity, error) {
	vals := map[string]SecurityVulnerabilitySeverity{
		"critical": SecurityVulnerabilitySeverity_Critical,
		"high":     SecurityVulnerabilitySeverity_High,
		"low":      SecurityVulnerabilitySeverity_Low,
		"medium":   SecurityVulnerabilitySeverity_Medium,
		"none":     SecurityVulnerabilitySeverity_None,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := SecurityVulnerabilitySeverity(input)
	return &out, nil
}
