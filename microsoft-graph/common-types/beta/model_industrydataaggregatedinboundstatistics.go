package beta

import (
	"encoding/json"
	"fmt"

	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type IndustryDataAggregatedInboundStatistics struct {
	// The aggregate count of errors encountered by activities during this run.
	Errors nullable.Type[int64] `json:"errors,omitempty"`

	// The aggregate count of active inbound groups processed during the run.
	Groups nullable.Type[int64] `json:"groups,omitempty"`

	// The aggregate count of active people matched to a Microsoft Entra user, by role.
	MatchedPeopleByRole *[]IndustryDataIndustryDataRunRoleCountMetric `json:"matchedPeopleByRole,omitempty"`

	// The aggregate count of active inbound memberships processed during the run.
	Memberships nullable.Type[int64] `json:"memberships,omitempty"`

	// The OData ID of this entity
	ODataId *string `json:"@odata.id,omitempty"`

	// The OData Type of this entity
	ODataType *string `json:"@odata.type,omitempty"`

	// The aggregate count of active inbound organizations processed during the run.
	Organizations nullable.Type[int64] `json:"organizations,omitempty"`

	// The aggregate count of active inbound people processed during the run.
	People nullable.Type[int64] `json:"people,omitempty"`

	// The aggregate count of active people not matched to a Microsoft Entra user, by role.
	UnmatchedPeopleByRole *[]IndustryDataIndustryDataRunRoleCountMetric `json:"unmatchedPeopleByRole,omitempty"`

	// The aggregate count of warnings generated by activities during this run.
	Warnings nullable.Type[int64] `json:"warnings,omitempty"`
}

var _ json.Marshaler = IndustryDataAggregatedInboundStatistics{}

func (s IndustryDataAggregatedInboundStatistics) MarshalJSON() ([]byte, error) {
	type wrapper IndustryDataAggregatedInboundStatistics
	wrapped := wrapper(s)
	encoded, err := json.Marshal(wrapped)
	if err != nil {
		return nil, fmt.Errorf("marshaling IndustryDataAggregatedInboundStatistics: %+v", err)
	}

	var decoded map[string]interface{}
	if err = json.Unmarshal(encoded, &decoded); err != nil {
		return nil, fmt.Errorf("unmarshaling IndustryDataAggregatedInboundStatistics: %+v", err)
	}

	delete(decoded, "errors")
	delete(decoded, "groups")
	delete(decoded, "matchedPeopleByRole")
	delete(decoded, "memberships")
	delete(decoded, "organizations")
	delete(decoded, "people")
	delete(decoded, "unmatchedPeopleByRole")
	delete(decoded, "warnings")

	encoded, err = json.Marshal(decoded)
	if err != nil {
		return nil, fmt.Errorf("re-marshaling IndustryDataAggregatedInboundStatistics: %+v", err)
	}

	return encoded, nil
}
