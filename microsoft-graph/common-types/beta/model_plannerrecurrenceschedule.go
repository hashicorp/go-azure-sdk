package beta

import (
	"encoding/json"
	"fmt"

	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type PlannerRecurrenceSchedule struct {
	// The next date for this schedule. When a new task is instantiated to continue the recurrence series, this date is used
	// for the dueDateTime of the new plannerTask. Auto-generated by the service. The Timestamp type represents date and
	// time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is
	// 2014-01-01T00:00:00Z. Read-only.
	NextOccurrenceDateTime nullable.Type[string] `json:"nextOccurrenceDateTime,omitempty"`

	// The OData ID of this entity
	ODataId *string `json:"@odata.id,omitempty"`

	// The OData Type of this entity
	ODataType *string `json:"@odata.type,omitempty"`

	// The pattern for recurrence. Required.
	Pattern RecurrencePattern `json:"pattern"`

	// The start date for the recurrence pattern. The Timestamp type represents date and time information using ISO 8601
	// format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
	PatternStartDateTime nullable.Type[string] `json:"patternStartDateTime,omitempty"`
}

var _ json.Marshaler = PlannerRecurrenceSchedule{}

func (s PlannerRecurrenceSchedule) MarshalJSON() ([]byte, error) {
	type wrapper PlannerRecurrenceSchedule
	wrapped := wrapper(s)
	encoded, err := json.Marshal(wrapped)
	if err != nil {
		return nil, fmt.Errorf("marshaling PlannerRecurrenceSchedule: %+v", err)
	}

	var decoded map[string]interface{}
	if err = json.Unmarshal(encoded, &decoded); err != nil {
		return nil, fmt.Errorf("unmarshaling PlannerRecurrenceSchedule: %+v", err)
	}

	delete(decoded, "nextOccurrenceDateTime")

	encoded, err = json.Marshal(decoded)
	if err != nil {
		return nil, fmt.Errorf("re-marshaling PlannerRecurrenceSchedule: %+v", err)
	}

	return encoded, nil
}
