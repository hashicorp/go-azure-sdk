package beta

import (
	"encoding/json"
	"fmt"

	"github.com/hashicorp/go-azure-sdk/sdk/nullable"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

var _ Entity = ManagedTenantsWindowsDeviceMalwareState{}

type ManagedTenantsWindowsDeviceMalwareState struct {
	// The additional information URL for the discovered malware. Optional. Read-only.
	AdditionalInformationUrl nullable.Type[string] `json:"additionalInformationUrl,omitempty"`

	// The number of times the piece of malware has been detected. Optional. Read-only.
	DetectionCount nullable.Type[int64] `json:"detectionCount,omitempty"`

	// A flag indicating whether the device has been deleted. Optional. Read-only.
	DeviceDeleted nullable.Type[bool] `json:"deviceDeleted,omitempty"`

	// The date and time the piece of malware was initially detected. Optional. Read-only.
	InitialDetectionDateTime nullable.Type[string] `json:"initialDetectionDateTime,omitempty"`

	// Date and time the entity was last updated in the multi-tenant management platform. Optional. Read-only.
	LastRefreshedDateTime nullable.Type[string] `json:"lastRefreshedDateTime,omitempty"`

	// The date and time the malware state was last changed. Optional. Read-only.
	LastStateChangeDateTime nullable.Type[string] `json:"lastStateChangeDateTime,omitempty"`

	// The category for the detected malware. Optional. Read-only.
	MalwareCategory nullable.Type[string] `json:"malwareCategory,omitempty"`

	// The display name for the detected malware. Optional. Read-only.
	MalwareDisplayName nullable.Type[string] `json:"malwareDisplayName,omitempty"`

	// The execution state for the detected malware. Optional. Read-only.
	MalwareExecutionState nullable.Type[string] `json:"malwareExecutionState,omitempty"`

	// The unique identifier for the detected malware. Optional. Read-only.
	MalwareId nullable.Type[string] `json:"malwareId,omitempty"`

	// The severity for the detected malware. Optional. Read-only.
	MalwareSeverity nullable.Type[string] `json:"malwareSeverity,omitempty"`

	// The threat state for the detected malware. Optional. Read-only.
	MalwareThreatState nullable.Type[string] `json:"malwareThreatState,omitempty"`

	// The identifier for the managed device where the malware was detected. Optional. Read-only.
	ManagedDeviceId nullable.Type[string] `json:"managedDeviceId,omitempty"`

	// The display name for the managed device where the malware was detected. Optional. Read-only.
	ManagedDeviceName nullable.Type[string] `json:"managedDeviceName,omitempty"`

	// The display name for the managed tenant. Optional. Read-only.
	TenantDisplayName nullable.Type[string] `json:"tenantDisplayName,omitempty"`

	// The Microsoft Entra tenant identifier for the managed tenant. Optional. Read-only.
	TenantId nullable.Type[string] `json:"tenantId,omitempty"`

	// Fields inherited from Entity

	// The unique identifier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// The OData ID of this entity
	ODataId *string `json:"@odata.id,omitempty"`

	// The OData Type of this entity
	ODataType *string `json:"@odata.type,omitempty"`
}

func (s ManagedTenantsWindowsDeviceMalwareState) Entity() BaseEntityImpl {
	return BaseEntityImpl{
		Id:        s.Id,
		ODataId:   s.ODataId,
		ODataType: s.ODataType,
	}
}

var _ json.Marshaler = ManagedTenantsWindowsDeviceMalwareState{}

func (s ManagedTenantsWindowsDeviceMalwareState) MarshalJSON() ([]byte, error) {
	type wrapper ManagedTenantsWindowsDeviceMalwareState
	wrapped := wrapper(s)
	encoded, err := json.Marshal(wrapped)
	if err != nil {
		return nil, fmt.Errorf("marshaling ManagedTenantsWindowsDeviceMalwareState: %+v", err)
	}

	var decoded map[string]interface{}
	if err = json.Unmarshal(encoded, &decoded); err != nil {
		return nil, fmt.Errorf("unmarshaling ManagedTenantsWindowsDeviceMalwareState: %+v", err)
	}

	delete(decoded, "additionalInformationUrl")
	delete(decoded, "detectionCount")
	delete(decoded, "deviceDeleted")
	delete(decoded, "initialDetectionDateTime")
	delete(decoded, "lastRefreshedDateTime")
	delete(decoded, "lastStateChangeDateTime")
	delete(decoded, "malwareCategory")
	delete(decoded, "malwareDisplayName")
	delete(decoded, "malwareExecutionState")
	delete(decoded, "malwareId")
	delete(decoded, "malwareSeverity")
	delete(decoded, "malwareThreatState")
	delete(decoded, "managedDeviceId")
	delete(decoded, "managedDeviceName")
	delete(decoded, "tenantDisplayName")
	delete(decoded, "tenantId")
	decoded["@odata.type"] = "#microsoft.graph.managedTenants.windowsDeviceMalwareState"

	encoded, err = json.Marshal(decoded)
	if err != nil {
		return nil, fmt.Errorf("re-marshaling ManagedTenantsWindowsDeviceMalwareState: %+v", err)
	}

	return encoded, nil
}
