package communicationsgateways

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type AutoGeneratedDomainNameLabelScope string

const (
	AutoGeneratedDomainNameLabelScopeNoReuse            AutoGeneratedDomainNameLabelScope = "NoReuse"
	AutoGeneratedDomainNameLabelScopeResourceGroupReuse AutoGeneratedDomainNameLabelScope = "ResourceGroupReuse"
	AutoGeneratedDomainNameLabelScopeSubscriptionReuse  AutoGeneratedDomainNameLabelScope = "SubscriptionReuse"
	AutoGeneratedDomainNameLabelScopeTenantReuse        AutoGeneratedDomainNameLabelScope = "TenantReuse"
)

func PossibleValuesForAutoGeneratedDomainNameLabelScope() []string {
	return []string{
		string(AutoGeneratedDomainNameLabelScopeNoReuse),
		string(AutoGeneratedDomainNameLabelScopeResourceGroupReuse),
		string(AutoGeneratedDomainNameLabelScopeSubscriptionReuse),
		string(AutoGeneratedDomainNameLabelScopeTenantReuse),
	}
}

type CommunicationsPlatform string

const (
	CommunicationsPlatformOperatorConnect  CommunicationsPlatform = "OperatorConnect"
	CommunicationsPlatformTeamsPhoneMobile CommunicationsPlatform = "TeamsPhoneMobile"
)

func PossibleValuesForCommunicationsPlatform() []string {
	return []string{
		string(CommunicationsPlatformOperatorConnect),
		string(CommunicationsPlatformTeamsPhoneMobile),
	}
}

type Connectivity string

const (
	ConnectivityPublicAddress Connectivity = "PublicAddress"
)

func PossibleValuesForConnectivity() []string {
	return []string{
		string(ConnectivityPublicAddress),
	}
}

type E911Type string

const (
	E911TypeDirectToEsrp E911Type = "DirectToEsrp"
	E911TypeStandard     E911Type = "Standard"
)

func PossibleValuesForE911Type() []string {
	return []string{
		string(E911TypeDirectToEsrp),
		string(E911TypeStandard),
	}
}

type ProvisioningState string

const (
	ProvisioningStateCanceled  ProvisioningState = "Canceled"
	ProvisioningStateFailed    ProvisioningState = "Failed"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

func PossibleValuesForProvisioningState() []string {
	return []string{
		string(ProvisioningStateCanceled),
		string(ProvisioningStateFailed),
		string(ProvisioningStateSucceeded),
	}
}

type Status string

const (
	StatusChangePending Status = "ChangePending"
	StatusComplete      Status = "Complete"
)

func PossibleValuesForStatus() []string {
	return []string{
		string(StatusChangePending),
		string(StatusComplete),
	}
}

type TeamsCodecs string

const (
	TeamsCodecsGSevenTwoTwo    TeamsCodecs = "G722"
	TeamsCodecsGSevenTwoTwoTwo TeamsCodecs = "G722_2"
	TeamsCodecsPCMA            TeamsCodecs = "PCMA"
	TeamsCodecsPCMU            TeamsCodecs = "PCMU"
	TeamsCodecsSILKEight       TeamsCodecs = "SILK_8"
	TeamsCodecsSILKOneSix      TeamsCodecs = "SILK_16"
)

func PossibleValuesForTeamsCodecs() []string {
	return []string{
		string(TeamsCodecsGSevenTwoTwo),
		string(TeamsCodecsGSevenTwoTwoTwo),
		string(TeamsCodecsPCMA),
		string(TeamsCodecsPCMU),
		string(TeamsCodecsSILKEight),
		string(TeamsCodecsSILKOneSix),
	}
}
