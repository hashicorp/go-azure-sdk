package subassessments

import (
	"encoding/json"
	"fmt"
)

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

var _ AdditionalData = ContainerRegistryVulnerabilityProperties{}

type ContainerRegistryVulnerabilityProperties struct {
	Cve              *[]CVE             `json:"cve,omitempty"`
	Cvss             *map[string]CVSS   `json:"cvss,omitempty"`
	ImageDigest      *string            `json:"imageDigest,omitempty"`
	Patchable        *bool              `json:"patchable,omitempty"`
	PublishedTime    *string            `json:"publishedTime,omitempty"`
	RepositoryName   *string            `json:"repositoryName,omitempty"`
	Type             *string            `json:"type,omitempty"`
	VendorReferences *[]VendorReference `json:"vendorReferences,omitempty"`

	// Fields inherited from AdditionalData
}

var _ json.Marshaler = ContainerRegistryVulnerabilityProperties{}

func (s ContainerRegistryVulnerabilityProperties) MarshalJSON() ([]byte, error) {
	type wrapper ContainerRegistryVulnerabilityProperties
	wrapped := wrapper(s)
	encoded, err := json.Marshal(wrapped)
	if err != nil {
		return nil, fmt.Errorf("marshaling ContainerRegistryVulnerabilityProperties: %+v", err)
	}

	var decoded map[string]interface{}
	if err := json.Unmarshal(encoded, &decoded); err != nil {
		return nil, fmt.Errorf("unmarshaling ContainerRegistryVulnerabilityProperties: %+v", err)
	}
	decoded["assessedResourceType"] = "ContainerRegistryVulnerability"

	encoded, err = json.Marshal(decoded)
	if err != nil {
		return nil, fmt.Errorf("re-marshaling ContainerRegistryVulnerabilityProperties: %+v", err)
	}

	return encoded, nil
}
