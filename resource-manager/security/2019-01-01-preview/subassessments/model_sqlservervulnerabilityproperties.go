package subassessments

import (
	"encoding/json"
	"fmt"
)

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

var _ AdditionalData = SqlServerVulnerabilityProperties{}

type SqlServerVulnerabilityProperties struct {
	Query *string `json:"query,omitempty"`
	Type  *string `json:"type,omitempty"`

	// Fields inherited from AdditionalData
}

var _ json.Marshaler = SqlServerVulnerabilityProperties{}

func (s SqlServerVulnerabilityProperties) MarshalJSON() ([]byte, error) {
	type wrapper SqlServerVulnerabilityProperties
	wrapped := wrapper(s)
	encoded, err := json.Marshal(wrapped)
	if err != nil {
		return nil, fmt.Errorf("marshaling SqlServerVulnerabilityProperties: %+v", err)
	}

	var decoded map[string]interface{}
	if err := json.Unmarshal(encoded, &decoded); err != nil {
		return nil, fmt.Errorf("unmarshaling SqlServerVulnerabilityProperties: %+v", err)
	}
	decoded["assessedResourceType"] = "SqlServerVulnerability"

	encoded, err = json.Marshal(decoded)
	if err != nil {
		return nil, fmt.Errorf("re-marshaling SqlServerVulnerabilityProperties: %+v", err)
	}

	return encoded, nil
}
