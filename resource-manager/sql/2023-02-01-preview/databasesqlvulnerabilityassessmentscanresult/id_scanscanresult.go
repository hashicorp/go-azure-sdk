package databasesqlvulnerabilityassessmentscanresult

import (
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
)

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

var _ resourceids.ResourceId = &ScanScanResultId{}

// ScanScanResultId is a struct representing the Resource ID for a Scan Scan Result
type ScanScanResultId struct {
	SubscriptionId    string
	ResourceGroupName string
	ServerName        string
	DatabaseName      string
	ScanId            string
	ScanResultId      string
}

// NewScanScanResultID returns a new ScanScanResultId struct
func NewScanScanResultID(subscriptionId string, resourceGroupName string, serverName string, databaseName string, scanId string, scanResultId string) ScanScanResultId {
	return ScanScanResultId{
		SubscriptionId:    subscriptionId,
		ResourceGroupName: resourceGroupName,
		ServerName:        serverName,
		DatabaseName:      databaseName,
		ScanId:            scanId,
		ScanResultId:      scanResultId,
	}
}

// ParseScanScanResultID parses 'input' into a ScanScanResultId
func ParseScanScanResultID(input string) (*ScanScanResultId, error) {
	parser := resourceids.NewParserFromResourceIdType(&ScanScanResultId{})
	parsed, err := parser.Parse(input, false)
	if err != nil {
		return nil, fmt.Errorf("parsing %q: %+v", input, err)
	}

	id := ScanScanResultId{}
	if err := id.FromParseResult(*parsed); err != nil {
		return nil, err
	}

	return &id, nil
}

// ParseScanScanResultIDInsensitively parses 'input' case-insensitively into a ScanScanResultId
// note: this method should only be used for API response data and not user input
func ParseScanScanResultIDInsensitively(input string) (*ScanScanResultId, error) {
	parser := resourceids.NewParserFromResourceIdType(&ScanScanResultId{})
	parsed, err := parser.Parse(input, true)
	if err != nil {
		return nil, fmt.Errorf("parsing %q: %+v", input, err)
	}

	id := ScanScanResultId{}
	if err := id.FromParseResult(*parsed); err != nil {
		return nil, err
	}

	return &id, nil
}

func (id *ScanScanResultId) FromParseResult(input resourceids.ParseResult) error {
	var ok bool

	if id.SubscriptionId, ok = input.Parsed["subscriptionId"]; !ok {
		return resourceids.NewSegmentNotSpecifiedError(id, "subscriptionId", input)
	}

	if id.ResourceGroupName, ok = input.Parsed["resourceGroupName"]; !ok {
		return resourceids.NewSegmentNotSpecifiedError(id, "resourceGroupName", input)
	}

	if id.ServerName, ok = input.Parsed["serverName"]; !ok {
		return resourceids.NewSegmentNotSpecifiedError(id, "serverName", input)
	}

	if id.DatabaseName, ok = input.Parsed["databaseName"]; !ok {
		return resourceids.NewSegmentNotSpecifiedError(id, "databaseName", input)
	}

	if id.ScanId, ok = input.Parsed["scanId"]; !ok {
		return resourceids.NewSegmentNotSpecifiedError(id, "scanId", input)
	}

	if id.ScanResultId, ok = input.Parsed["scanResultId"]; !ok {
		return resourceids.NewSegmentNotSpecifiedError(id, "scanResultId", input)
	}

	return nil
}

// ValidateScanScanResultID checks that 'input' can be parsed as a Scan Scan Result ID
func ValidateScanScanResultID(input interface{}, key string) (warnings []string, errors []error) {
	v, ok := input.(string)
	if !ok {
		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
		return
	}

	if _, err := ParseScanScanResultID(v); err != nil {
		errors = append(errors, err)
	}

	return
}

// ID returns the formatted Scan Scan Result ID
func (id ScanScanResultId) ID() string {
	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Sql/servers/%s/databases/%s/sqlVulnerabilityAssessments/default/scans/%s/scanResults/%s"
	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroupName, id.ServerName, id.DatabaseName, id.ScanId, id.ScanResultId)
}

// Segments returns a slice of Resource ID Segments which comprise this Scan Scan Result ID
func (id ScanScanResultId) Segments() []resourceids.Segment {
	return []resourceids.Segment{
		resourceids.StaticSegment("staticSubscriptions", "subscriptions", "subscriptions"),
		resourceids.SubscriptionIdSegment("subscriptionId", "12345678-1234-9876-4563-123456789012"),
		resourceids.StaticSegment("staticResourceGroups", "resourceGroups", "resourceGroups"),
		resourceids.ResourceGroupSegment("resourceGroupName", "example-resource-group"),
		resourceids.StaticSegment("staticProviders", "providers", "providers"),
		resourceids.ResourceProviderSegment("staticMicrosoftSql", "Microsoft.Sql", "Microsoft.Sql"),
		resourceids.StaticSegment("staticServers", "servers", "servers"),
		resourceids.UserSpecifiedSegment("serverName", "serverValue"),
		resourceids.StaticSegment("staticDatabases", "databases", "databases"),
		resourceids.UserSpecifiedSegment("databaseName", "databaseValue"),
		resourceids.StaticSegment("staticSqlVulnerabilityAssessments", "sqlVulnerabilityAssessments", "sqlVulnerabilityAssessments"),
		resourceids.StaticSegment("vulnerabilityAssessmentName", "default", "default"),
		resourceids.StaticSegment("staticScans", "scans", "scans"),
		resourceids.UserSpecifiedSegment("scanId", "scanIdValue"),
		resourceids.StaticSegment("staticScanResults", "scanResults", "scanResults"),
		resourceids.UserSpecifiedSegment("scanResultId", "scanResultIdValue"),
	}
}

// String returns a human-readable description of this Scan Scan Result ID
func (id ScanScanResultId) String() string {
	components := []string{
		fmt.Sprintf("Subscription: %q", id.SubscriptionId),
		fmt.Sprintf("Resource Group Name: %q", id.ResourceGroupName),
		fmt.Sprintf("Server Name: %q", id.ServerName),
		fmt.Sprintf("Database Name: %q", id.DatabaseName),
		fmt.Sprintf("Scan: %q", id.ScanId),
		fmt.Sprintf("Scan Result: %q", id.ScanResultId),
	}
	return fmt.Sprintf("Scan Scan Result (%s)", strings.Join(components, "\n"))
}
